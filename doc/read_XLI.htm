<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<HEAD>
		<TITLE>read_XLI</TITLE>
		<style TYPE="text/css"> BODY { font-family:verdana,arial,helvetica; margin:0; }
	</style>
	</HEAD>
	<BODY>
		<TABLE STYLE="TABLE-LAYOUT:fixed" class="clsContainer" CELLPADDING="15" CELLSPACING="0"
			WIDTH="100%" BORDER="0">
			<TR>
				<TD VALIGN="top">
					<h1>read_XLI</h1>
					<p>
						Create an lprec structure and read a model via the External Language Interface.</p>
					<P><B>lprec *read_XLI(char </B>*<I>xliname</I><B>, char </B>*<I>modelname</I><B>, char </B>*<I>dataname</I><B>, char </B>*<I>options</I><B>, int </B><I>verbose</I><B>);</B></P>
					<p class="label">
						<b>Return Value</b></p>
					<p>
						Returns a pointer to a new lprec structure. This must be provided to almost all
						lp_solve functions.<br>
						A <b>NULL</b> return value indicates an error.</p>
					<p class="label">
						<b>Parameters</b></p>
					<P class="dt"><I>xliname</I></P>
					<P class="indent">
					Filename of the XLI package.
					<P class="dt"><I>modelname</I></P>
					<P class="indent">
					Filename to read the model from.
					<P class="dt"><I>dataname</I></P>
					<P class="indent">
					Filename to read the data from. This may be optional. In that case, set the parameter to NULL.</p>
					<P class="dt"><I>options</I></P>
					<P class="indent">Extra options that can be used by the reader.</p>
					<P class="indent"><i>verbose</i></p>
					<p class="indent">The verbose level. Can be one of the following values:<br>
						CRITICAL (1), SEVERE (2), IMPORTANT (3), NORMAL (4), DETAILED (5), FULL (6)</p>
					<p>See also <A href="set_verbose.htm">set_verbose</A> and <A href="get_verbose.htm">get_verbose</A>.</p>
					<p class="label"><b>Remarks</b></p>
					<P>
						The <b>read_XLI</b> function constructs a
						new lprec structure and reads the model from <i>filename</i> via the specified XLI.
						See <a href="XLI.htm">External Language Interfaces</a> for a complete description on XLIs.</p>
					<p class="label">
						<b>Example</b></p>
					<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include "lp_lib.h"
int main(void)
{
  lprec *lp;

  /* Read LP model */
  lp = read_XLI("xli_MathProg", "model.mat", NULL, "", NORMAL);
  if(lp == NULL) {
    fprintf(stderr, "Unable to read model\n");
    return(1);
  }

  /* Model read */

  /*
  .
  .
  .
  */

  delete_lp(lp);
  return(0);
}
</code></pre>
					<p>
						<A HREF="lp_solveAPIreference.htm">lp_solve API reference</A></p>
					<p>
						<b>See Also</b> <A HREF="delete_lp.htm">delete_lp</A>, <A HREF="free_lp.htm">free_lp</A>,
						<A HREF="make_lp.htm">make_lp</A>, <A HREF="copy_lp.htm">copy_lp</A>, <A HREF="write_lp.htm">write_lp, write_LP, write_lpex</A>,
						<A HREF="read_mps.htm">read_mps, read_freemps, read_MPS, read_freeMPS</A>, <A HREF="write_mps.htm">write_mps, write_freemps,
							write_MPS, write_freeMPS, MPS_writefileex</A>, <A HREF="write_XLI.htm">write_XLI</A>, <A HREF="has_XLI.htm">has_XLI</A>, <A HREF="is_nativeXLI.htm">is_nativeXLI</A>, <A HREF="set_XLI.htm">set_XLI</A></p>
				</TD>
			</TR>
		</TABLE>
	</BODY>
</html>
