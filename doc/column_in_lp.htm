<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<HEAD>
		<TITLE>column_in_lp</TITLE>
		<style TYPE="text/css"> BODY { font-family:verdana,arial,helvetica; margin:0; }
	</style>
	</HEAD>
	<BODY>
		<TABLE class="clsContainer" style="TABLE-LAYOUT: fixed" cellSpacing="0" cellPadding="15"
			width="100%" border="0">
			<TR>
				<TD vAlign="top">
					<h1>column_in_lp</h1>
					<p>Check if a column is already present in the lp.</p>
					<p><b>int column_in_lp(lprec </b>*<i>lp</i><b>, REAL </b>*<i>column</i><b>);</b></p>
					<p class="label"><b>Return Value</b></p>
					<p><b>column_in_lp</b> returns the (first) column number if the column is already in the lp and
						0 if not.<br>
					</p>
					<p class="label"><b>Parameters</b></p>
					<p class="dt"><i>lp</i></p>
					<p class="indent">Pointer to previously created lp model. See return value of <A href="make_lp.htm">
							make_lp</A>, <A HREF="copy_lp.htm">copy_lp</A>, <A href="read_lp.htm">read_lp,
							read_LP</A>, <A href="read_mps.htm">read_mps, read_freemps, read_MPS, read_freeMPS</A>, <A HREF="read_XLI.htm">read_XLI</A></p>
					<p class="dt"><i>column</i></p>
					<p class="indent">An array with 1+<A HREF="get_Nrows.htm">get_Nrows</A> elements that are checked against the existing
						columns in the lp.</p>
					<p class="label"><b>Remarks</b></p>
					<p>The <b>column_in_lp</b> functions checks if a column is already present in the
						lp.<br>
						It does not look at bounds and types, only at matrix values.<br>
						The first matched column is returned. If there is no column match, then 0 is returned.<br>
						Note that element 0 is the objective function value. Element 1 is column 1, and so on.
					</p>
					<p class="label"><b>Example</b></p>
					<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include "lp_lib.h"

int main(void)
{
  lprec *lp;
  REAL column[1+2]; /* must be 1 more then number of rows ! */
  int ret;

  /* Create a new LP model */
  lp = make_lp(2, 1);
  if(lp == NULL) {
    fprintf(stderr, "Unable to create new LP model\n");
    return(1);
  }

  column[0] = 0.0;
  column[1] = 0.0;
  column[2] = 0.0;
  ret = column_in_lp(lp, column); /* Will return 1 */

  delete_lp(lp);
  return(0);
}
</code></pre>
					<p>
						<A HREF="lp_solveAPIreference.htm">lp_solve API reference</A></p>
					<p>
						<b>See Also</b> <A HREF="make_lp.htm">make_lp</A>, <A HREF="copy_lp.htm">copy_lp</A>,
						<A href="read_lp.htm">read_lp, read_LP</A>, <A HREF="read_mps.htm">read_mps,
							read_freemps, read_MPS, read_freeMPS</A>, <A HREF="read_XLI.htm">read_XLI</A>, <A HREF="add_column.htm">add_column, add_columnex, str_add_column</A>,
						<A HREF="set_column.htm">set_column, set_columnex</A>, <A HREF="del_column.htm">del_column</A></p>
				</TD>
			</TR>
		</TABLE>
	</BODY>
</html>
