<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<HEAD>
		<TITLE>is_binary</TITLE>
		<style TYPE="text/css"> BODY { font-family:verdana,arial,helvetica; margin:0; }
	</style>
	</HEAD>
	<BODY>
		<TABLE class="clsContainer" style="TABLE-LAYOUT: fixed" cellSpacing="0" cellPadding="15"
			width="100%" border="0">
			<TR>
				<TD vAlign="top">
					<h1>is_binary</h1>
					<p>Gets the type of the variable. Binary integer or floating point.</p>
					<p><b>unsigned char is_binary(lprec </b>*<i>lp</i><b>, int </b><i>column</i><b>);</b></p>
					<p class="label"><b>Return Value</b></p>
					<p><b>is_binary</b> returns TRUE (1) if the variable is set as binary, FALSE (0)
						otherwise.<br>
					</p>
					<p class="label"><b>Parameters</b></p>
					<p class="dt"><i>lp</i></p>
					<p class="indent">Pointer to previously created lp model. See return value of <A href="make_lp.htm">
							make_lp</A>, <A HREF="copy_lp.htm">copy_lp</A>, <A href="read_lp.htm">read_lp,
							read_LP</A>, <A href="read_mps.htm">read_mps, read_freemps, read_MPS, read_freeMPS</A>, <A HREF="read_XLI.htm">read_XLI</A></p>
					<p class="dt"><i>column</i></p>
					<p class="indent">The column number of the variable that must be checked. It must
						be between 1 and the number of columns in the lp.</p>
					<p class="label"><b>Remarks</b></p>
					<p>The <b>is_binary</b> function returns if a variable must be binary or not.
						Default a variable is not binary. A binary variable is an integer variable with
						lower bound 0 and upper bound 1. From the moment there is at least one integer
						variable in the model, the Branch and Bound algorithm is used to make these
						variables integer. Note that solving times can be considerably larger when
						there are integer variables.
						See <a href="integer.htm">integer variables</a> for a description about integer variables.
					</p>
					<p class="label"><b>Example</b></p>
					<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include "lp_lib.h"

int main(void)
{
  lprec *lp;
  int binary;

  /* Create a new LP model */
  lp = make_lp(0, 2);
  if(lp == NULL) {
    fprintf(stderr, "Unable to create new LP model\n");
    return(1);
  }

  binary = is_binary(lp, 1); /* will return 0 since the variable is not set as binary at this point */

  delete_lp(lp);
  return(0);
}
</code></pre>
					<p>
						<A HREF="lp_solveAPIreference.htm">lp_solve API reference</A></p>
					<p>
						<b>See Also</b> <A HREF="make_lp.htm">make_lp</A>, <A HREF="copy_lp.htm">copy_lp</A>,
						<A href="read_lp.htm">read_lp, read_LP</A>, <A HREF="read_mps.htm">read_mps,
							read_freemps, read_MPS, read_freeMPS</A>, <A HREF="read_XLI.htm">read_XLI</A>, <A HREF="set_binary.htm">set_binary</A>, <A HREF="is_int.htm">is_int</A>, <A HREF="set_int.htm">set_int</A></p>
				</TD>
			</TR>
		</TABLE>
	</BODY>
</html>
