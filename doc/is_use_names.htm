<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html>
	<HEAD>
		<TITLE>is_use_names</TITLE>
		<style TYPE="text/css"> BODY { font-family:verdana,arial,helvetica; margin:0; }
	</style>
	</HEAD>
	<BODY>
		<TABLE class="clsContainer" style="TABLE-LAYOUT: fixed" cellSpacing="0" cellPadding="15" width="100%" border="0">
			<TR>
				<TD vAlign="top">
					<h1>is_use_names</h1>
					<p>Returns if variable or constraint names are used.</p>
					<p><b>unsigned char is_use_names(lprec </b>*<i>lp</i><b>, unsigned char </b><i>isrow</i><b>);</b></p>
					<p class="label"><b>Return Value</b></p>
					<p><b>is_use_names</b> returns a boolean value indicating if variable or constraint names
					are used.<br>
					</p>
					<p class="label"><b>Parameters</b></p>
					<p class="dt"><i>lp</i></p>
					<p class="indent">Pointer to previously created lp model. See return value of <A href="make_lp.htm">
							make_lp</A>, <A HREF="copy_lp.htm">copy_lp</A>, <A href="read_lp.htm">read_lp,
							read_LP</A>, <A href="read_mps.htm">read_mps, read_freemps, read_MPS, read_freeMPS</A>, <A HREF="read_XLI.htm">read_XLI</A></p>
					<p class="dt">
						<i>isrow</i></p>
					<p class="indent">Set to FALSE (0) if column information is needed and TRUE (1) if row information is needed.</p>
					<p class="label"><b>Remarks</b></p>
					<p>When a model is read from file or created via the API, variables and constraints can be named.
					These names are used to report information or to save the model in a given format.
					However, sometimes it is required to ignore these names and to use the internal names of lp_solve.
					This is for example the case when the names do not comply to the syntax rules of the format that
					will be used to write the model to.<br>
					Names are used by default.
					</p>
					<p class="label"><b>Example</b></p>
					<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include "lp_lib.h"

int main(void)
{
  lprec *lp;
  int ret;

  /* Create a new LP model */
  lp = make_lp(0, 0);
  if(lp == NULL) {
    fprintf(stderr, "Unable to create new LP model\n");
    return(1);
  }

  ret = is_use_names(lp); /* will return TRUE */

  delete_lp(lp);
  return(0);
}
</code></pre>
					<p>
						<A HREF="lp_solveAPIreference.htm">lp_solve API reference</A></p>
					<p>
						<b>See Also</b> <A HREF="make_lp.htm">make_lp</A>, <A HREF="copy_lp.htm">copy_lp</A>,
						<A href="read_lp.htm">read_lp, read_LP</A>, <A HREF="read_mps.htm">read_mps,
							read_freemps, read_MPS, read_freeMPS</A>, <A HREF="read_XLI.htm">read_XLI</A>, <A HREF="set_use_names.htm">set_use_names</A>, <A HREF="set_col_name.htm">set_col_name</A>, <A HREF="get_col_name.htm">get_col_name</A>, <A HREF="set_row_name.htm">set_row_name</A>, <A HREF="get_row_name.htm">get_row_name</A></p>
				</TD>
			</TR>
		</TABLE>
	</BODY>
</HTML>
