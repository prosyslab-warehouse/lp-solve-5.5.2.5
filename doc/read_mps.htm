<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<HEAD>
		<TITLE>read_mps, read_freemps, read_MPS, read_freeMPS</TITLE>
		<style TYPE="text/css"> BODY { font-family:verdana,arial,helvetica; margin:0; }
	</style>
	</HEAD>
	<BODY>
		<TABLE STYLE="TABLE-LAYOUT:fixed" class="clsContainer" CELLPADDING="15" CELLSPACING="0"
			WIDTH="100%" BORDER="0">
			<TR>
				<TD VALIGN="top">
					<h1>read_mps, read_freemps, read_MPS, read_freeMPS</h1>
					<p>
						Create an lprec structure and read an mps model from file.</p>
					<p><b>lprec *read_mps(FILE </b>*<i>stream</i><b>, int </b><i>options</i><b>);</b></p>
					<p><b>lprec *read_freemps(FILE </b>*<i>stream</i><b>, int </b><i>options</i><b>);</b></p>
					<P><B>lprec *read_MPS(char </B>*<I>filename</I><B>, int </B><I>options</I><B>);</B></P>
					<P><B>lprec *read_freeMPS(char </B>*<I>filename</I><B>, int </B><I>options</I><B>);</B></P>
					<p class="label">
						<b>Return Value</b></p>
					<p>
						Returns a pointer to a new lprec structure. This must be provided to almost all
						lp_solve functions.<br>
						A <b>NULL</b> return value indicates an error. Specifically file could not be
						opened or file has wrong structure or not enough memory available to setup an
						lprec structure.</p>
					<p class="label">
						<b>Parameters</b></p>
					<p class="dt">
						<i>stream</i></p>
					<p class="indent">
						Pointer to <b>FILE</b> structure.</p>
					<P class="dt"><I>filename</I></P>
					<P class="indent">
					Filename to read the mps model from.
					<P class="indent">
						<i>options</i>
					<p class="indent">Specifies the verbose level and how to interprete the MPS layout.</p>
					<p class="indent">The verbose level can be one of the following values:<br>
						CRITICAL (1), SEVERE (2), IMPORTANT (3), NORMAL (4), DETAILED (5), FULL (6)</p>
					<p>See also <A href="set_verbose.htm">set_verbose</A> and <A href="get_verbose.htm">get_verbose</A>.</p>
					<p>This can be ORed by any one of the following combinations:</p>
					<TABLE id="Table1" cellSpacing="1" cellPadding="1" width="100%" border="1">
						<TR>
							<TD>MPS_FREE (8)</TD>
							<TD>The MPS format is free MPS format. If not specified, read_MPS and read_mps use by default the fixed MPS format.
							    The option is not needed for read_freemps and read_freeMPS as these routine already interprete the file in free MPS
							    format, but it is allowed to specify the option anyway.
							    See also <A href="mps-format.htm">MPS file format</A></TD>
						</TR>
						<TR>
							<TD>MPS_IBM (16)</TD>
							<TD>Interprete integer variables without bounds as binary variables. That is the original IBM standard.
							    By default lp_solve interpretes variables without bounds as having no upperbound as for real variables.
							    See also <A href="mps-format.htm">MPS file format</A> (section G.)</TD>
						</TR>
						<TR>
							<TD>MPS_NEGOBJCONST (32)</TD>
							<TD>Interprete the objective constant with an oposite sign.
							    Some solvers interprete the objective constant as a value in the RHS and negate it when brought at the LHS.
							    This option allows to let lp_solve do this also.
							    See also <A href="mps-format.htm">MPS file format</A></TD>
						</TR>
					</TABLE>
					<br>
					<p class="label">
						<b>Remarks</b></p>
					<P>
						The <b>read_mps</b>, <b>read_freemps</b>, <B>read_MPS</B>, <B>read_freeMPS</B> functions construct a new lprec
						structure and read the model from <i>filename</i>. <B>read_mps</B>, <B>read_freemps</B> need a file
						pointer to an already opened file. <B>read_MPS</B>, <B>read_freeMPS</B> accepts the name of the
						file. The latter functions will generally be more convenient.</P>
					<P>
						The model in the file must be in <a href="mps-format.htm">mps-format</a>.
						The read_free* routines accept files only in free MPS format.
						The other routines by default accept files in fixed MPS format.
						However via the options parameter this can be set to free format also.
						That makes the read_free* routines obsolete, but they are kept for backward compatibility.
						The second argument of the routines was originally called verbose.
						This is extended from version 5.5.15 on to verbose with the possibility to add extra options.<br>
						<br>
						It is advised not to read/write the lprec structure. Instead, use the function
						interface to communicate with the lp_solve library. This because the structure
						can change over time. The function interface will be more stable.</P>
					<p class="label">
						<b>Example</b></p>
					<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include "lp_lib.h"
int main(void)
{
  lprec *lp;

  /* Read MPS model */
  lp = read_MPS("model.mps", NORMAL);
  if(lp == NULL) {
    fprintf(stderr, "Unable to read model\n");
    return(1);
  }

  /* Model read */

  /*
  .
  .
  .
  */

  delete_lp(lp);
  return(0);
}
</code></pre>
					<p>
						<A HREF="lp_solveAPIreference.htm">lp_solve API reference</A></p>
					<p>
						<b>See Also</b> <A HREF="delete_lp.htm">delete_lp</A>, <A HREF="free_lp.htm">free_lp</A>,
						<A HREF="make_lp.htm">make_lp</A>, <A HREF="write_mps.htm">write_mps, write_freemps, write_MPS, write_freeMPS, MPS_writefileex</A>,
						<A href="read_lp.htm">read_lp, read_LP</A>, <A HREF="write_lp.htm">write_lp,
							write_LP, write_lpex</A></p>
				</TD>
			</TR>
		</TABLE>
	</BODY>
</html>
