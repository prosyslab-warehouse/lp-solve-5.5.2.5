<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<HEAD>
		<TITLE>set_bb_depthlimit</TITLE>
		<style TYPE="text/css"> BODY { font-family:verdana,arial,helvetica; margin:0; }
	</style>
	</HEAD>
	<BODY>
		<TABLE class="clsContainer" style="TABLE-LAYOUT: fixed" cellSpacing="0" cellPadding="15"
			width="100%" border="0">
			<TR>
				<TD vAlign="top">
					<h1>set_bb_depthlimit</h1>
					<p>
						Sets the maximum branch-and-bound depth.</p>
					<p><b>void set_bb_depthlimit(lprec </b>*<i>lp</i><b>, int </b><i>bb_maxlevel</i><b>);</b></p>
					<p class="label"><b>Return Value</b></p>
					<p><b>set_bb_depthlimit</b> has no return value.
					</p>
					<p class="label"><b>Parameters</b></p>
					<p class="dt"><i>lp</i></p>
					<p class="indent">Pointer to previously created lp model. See return value of <A href="make_lp.htm">
							make_lp</A>, <A HREF="copy_lp.htm">copy_lp</A>, <A href="read_lp.htm">read_lp,
							read_LP</A>, <A href="read_mps.htm">read_mps, read_freemps, read_MPS, read_freeMPS</A>, <A HREF="read_XLI.htm">read_XLI</A></p>
					<p class="dt"><i>bb_maxlevel</i></p>
					<p class="indent">
						Specifies the maximum branch-and-bound depth. A positive value means that the depth
						is absoluut. A negative value means a relative B&amp;B depth limit.
						The "order" of a MIP problem is defined to be 2x the number of binary variables plus
						the number of SC and SOS variables. A relative value of -x results in a maximum
						depth of x times the order of the MIP problem.</p>
					<p class="label"><b>Remarks</b></p>
					<p>The <b>set_bb_depthlimit</b> function sets the maximum branch-and-bound depth.<br>
						This is only useful if there are integer, semi-continious or SOS variables in
						the model so that the branch-and-bound algorithm must be used to solve them.
						The branch-and-bound algorithm will not go deeper than this level. When 0 then
						there is no limit to the depth. Limiting the depth will speed up solving time,
						but there is a chance that the found solution is not the most optimal one. Be
						aware of this. It can also result in not finding a solution at all.
						<br>
						The default is -50.
					</p>
					<p class="label"><b>Example</b></p>
					<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include "lp_lib.h"

int main(void)
{
  lprec *lp;

  /* Create a new LP model */
  lp = make_lp(0, 0);
  if(lp == NULL) {
    fprintf(stderr, "Unable to create new LP model\n");
    return(1);
  }

  set_bb_depthlimit(lp, 10);

  delete_lp(lp);
  return(0);
}
</code></pre>
					<p>
						<A HREF="lp_solveAPIreference.htm">lp_solve API reference</A></p>
					<p>
						<b>See Also</b> <A HREF="make_lp.htm">make_lp</A>, <A HREF="copy_lp.htm">copy_lp</A>,
						<A href="read_lp.htm">read_lp, read_LP</A>, <A HREF="read_mps.htm">read_mps,
							read_freemps, read_MPS, read_freeMPS</A>, <A HREF="read_XLI.htm">read_XLI</A>, <A HREF="get_bb_depthlimit.htm">get_bb_depthlimit</A></p>
				</TD>
			</TR>
		</TABLE>
	</BODY>
</html>
