<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<HEAD>
		<TITLE>get_bb_rule</TITLE>
		<style TYPE="text/css"> BODY { font-family:verdana,arial,helvetica; margin:0; }
	</style>
	</HEAD>
	<BODY>
		<TABLE class="clsContainer" style="TABLE-LAYOUT: fixed" cellSpacing="0" cellPadding="15"
			width="100%" border="0">
			<TR>
				<TD vAlign="top">
					<h1>get_bb_rule</h1>
					<p>Returns the branch-and-bound rule.</p>
					<p><b>int get_bb_rule(lprec </b>*<i>lp</i><b>);</b></p>
					<p class="label"><b>Return Value</b></p>
					<p><b>get_bb_rule</b> returns the branch-and-bound rule. Can by any of the
						following values:</p>
					<TABLE id="Table2" cellSpacing="1" cellPadding="1" width="100%" border="1">
						<TR>
							<TD>NODE_FIRSTSELECT (0)</TD>
							<TD>Select lowest indexed non-integer column</TD>
						</TR>
						<TR>
							<TD>NODE_GAPSELECT (1)</TD>
							<TD>Selection based on distance from the current bounds</TD>
						</TR>
						<TR>
							<TD>NODE_RANGESELECT (2)</TD>
							<TD>Selection based on the largest current bound</TD>
						</TR>
						<TR>
							<TD>NODE_FRACTIONSELECT (3)</TD>
							<TD>Selection based on largest fractional value</TD>
						</TR>
						<TR>
							<TD>NODE_PSEUDOCOSTSELECT (4)</TD>
							<TD>Simple, unweighted pseudo-cost of a variable</TD>
						</TR>
						<TR>
							<TD>NODE_PSEUDONONINTSELECT (5)</TD>
							<TD>This is an extended pseudo-costing strategy based on minimizing the number of
								integer infeasibilities</TD>
						</TR>
						<TR>
							<TD>NODE_PSEUDORATIOSELECT (6)</TD>
							<TD>This is an extended pseudo-costing strategy based on maximizing the normal
								pseudo-cost divided by the number of infeasibilities. Effectively, it is
								similar to (the reciprocal of) a cost/benefit ratio</TD>
						</TR>
						<TR>
							<TD>NODE_USERSELECT (7)</TD>
							<TD>&nbsp;</TD>
						</TR>
					</TABLE>
					<br>
					One of these values may be or-ed with one or more of the following values:<br>
					<br>
					<TABLE id="Table1" cellSpacing="1" cellPadding="1" width="100%" border="1">
						<TR>
							<TD>NODE_WEIGHTREVERSEMODE (8)</TD>
							<TD>Select by criterion minimum (worst), rather than criterion maximum (best)</TD>
						</TR>
						<TR>
							<TD>NODE_BRANCHREVERSEMODE (16)</TD>
							<TD>In case when <A HREF="get_bb_floorfirst.htm">get_bb_floorfirst</A> is BRANCH_AUTOMATIC, select the oposite direction (lower/upper branch) that BRANCH_AUTOMATIC had chosen.</TD>
						</TR>
						<TR>
							<TD>NODE_GREEDYMODE (32)</TD>
							<TD>&nbsp;</TD>
						</TR>
						<TR>
							<TD>NODE_PSEUDOCOSTMODE (64)</TD>
							<TD>Toggles between weighting based on pseudocost or objective function value</TD>
						</TR>
						<TR>
							<TD>NODE_DEPTHFIRSTMODE (128)</TD>
							<TD>Select the node that has already been selected before the most number of times</TD>
						</TR>
						<TR>
							<TD>NODE_RANDOMIZEMODE (256)</TD>
							<TD>Adds a randomization factor to the score for any node candicate</TD>
						</TR>
						<TR>
							<TD>NODE_GUBMODE (512)</TD>
							<TD>&nbsp;</TD>
						</TR>
						<TR>
							<TD>NODE_DYNAMICMODE (1024)</TD>
							<TD>When <i>NODE_DEPTHFIRSTMODE</i> is selected, switch off this mode when a first solution is found.</TD>
						</TR>
						<TR>
							<TD>NODE_RESTARTMODE (2048)</TD>
							<TD>Enables regular restarts of pseudocost value calculations</TD>
						</TR>
						<TR>
							<TD>NODE_BREADTHFIRSTMODE (4096)</TD>
							<TD>Select the node that has been selected before the fewest number of times or not at all</TD>
						</TR>
						<TR>
							<TD>NODE_AUTOORDER (8192)</TD>
							<TD>Create an "optimal" B&amp;B variable ordering. Can speed up B&amp;B algorithm.</TD>
						</TR>
                                                <TR>
							<TD>NODE_RCOSTFIXING (16384)</TD>
							<TD>Do bound tightening during B&amp;B based of reduced cost information</TD>
						</TR>
                                                <TR>
							<TD>NODE_STRONGINIT (32768)</TD>
							<TD>Initialize pseudo-costs by strong branching</TD>
						</TR>
					</TABLE>
					<p class="label"><b>Parameters</b></p>
					<p class="dt"><i>lp</i></p>
					<p class="indent">Pointer to previously created lp model. See return value of <A href="make_lp.htm">
							make_lp</A>, <A HREF="copy_lp.htm">copy_lp</A>, <A href="read_lp.htm">read_lp, read_LP</A>, <A href="read_mps.htm">read_mps, read_freemps, read_MPS, read_freeMPS</A>, <A HREF="read_XLI.htm">read_XLI</A></p>
					<b>Remarks</b>
					<p>The <b>get_bb_rule</b> function returns the branch-and-bound rule for choosing
						which non-integer variable is to be selected. This rule can influence solving
						times considerably. Depending on the model one rule can be best and for another
						model another rule.<br>
						The default is NODE_PSEUDONONINTSELECT + NODE_GREEDYMODE + NODE_DYNAMICMODE + NODE_RCOSTFIXING (17445).
					</p>
					<p class="label"><b>Example</b></p>
					<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include "lp_lib.h"

int main(void)
{
  lprec *lp;
  int bb_rule;

  /* Create a new LP model */
  lp = make_lp(0, 0);
  if(lp == NULL) {
    fprintf(stderr, "Unable to create new LP model\n");
    return(1);
  }

  bb_rule = get_bb_rule(lp);

  delete_lp(lp);
  return(0);
}
</code></pre>
					<p>
						<A HREF="lp_solveAPIreference.htm">lp_solve API reference</A></p>
					<p>
						<b>See Also</b> <A HREF="make_lp.htm">make_lp</A>, <A HREF="copy_lp.htm">copy_lp</A>, <A HREF="copy_lp.htm">copy_lp</A>, <A href="read_lp.htm">read_lp,
							read_LP</A>, <A HREF="read_mps.htm">
							read_mps, read_freemps, read_MPS, read_freeMPS</A>, <A HREF="read_XLI.htm">read_XLI</A>, <A HREF="set_bb_rule.htm">set_bb_rule</A>, <A HREF="put_bb_nodefunc.htm">put_bb_nodefunc</A></p>
				</TD>
			</TR>
		</TABLE>
	</BODY>
</html>
